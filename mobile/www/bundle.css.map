{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../Header.svelte",
    "../Toast.svelte",
    "../Install.svelte",
    "../Modal.svelte",
    "../ThirdParty.svelte",
    "../Overview.svelte",
    "../Write.svelte",
    "../Settings.svelte",
    "../Sidebar.svelte",
    "../Cloud.svelte",
    "../Placeholder.svelte",
    "../Alert.svelte",
    "../Project.svelte",
    "../Status.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"javascript\">\n  import { createEventDispatcher, onMount } from \"svelte\";\n  import { fade, fly } from \"svelte/transition\";\n  import { link, location } from \"svelte-spa-router\";\n  import { state, tabs } from \"../stores\";\n  import { deskgap, isRunningElectron } from \"../utils\";\n  import { _ } from \"svelte-i18n\";\n\n  import cloud from \"../cloud\";\n  import active from \"svelte-spa-router/active\";\n\n  export let navigationState;\n\n  const dispatch = createEventDispatcher();\n\n  //let isValidLogin = cloud.isValidLogin();\n  let cloudSyncState = false;\n  let syncState = false;\n\n  /*$: {\n    if ($state.lastCloudSave < $state.lastLocalSave && isValidLogin) {\n      cloudSyncState = true;\n    } else {\n      cloudSyncState = false;\n    }\n  }*/\n\n  function createTab() {\n    tabs.createTab($state.currentProject, $state.currentTitle, $location);\n  }\n</script>\n\n<style type=\"text/css\">\n  .tab-action:hover {\n    color: #4aaed9;\n  }\n\n  .titlebar {\n    float: right;\n    line-height: 4rem;\n    font-size: 1.5rem;\n    padding: 0 1rem;\n    opacity: 0.65;\n    cursor: pointer;\n    color: var(--menu-link);\n  }\n\n  .titlebar:hover {\n    opacity: 1;\n  }\n\n  .tab.new {\n    cursor: pointer;\n  }\n</style>\n\n<header style=\"-webkit-app-region: drag\">\n  <nav class=\"header noselect\">\n    <button\n      class=\"burger\"\n      id=\"open-sidebar\"\n      on:click={() => dispatch('openSidebar')}\n      style=\"-webkit-app-region: no-drag\">\n      <span class=\"lnr lnr-menu\" />\n    </button>\n    <a\n      class=\"logo-mobile\"\n      href=\"/\"\n      use:link\n      style=\"-webkit-app-region: no-drag\">\n      <img src=\"logo.png\" alt=\"OmniaWrite Logo\" />\n    </a>\n    {#if navigationState}\n      <div\n        id=\"navigation\"\n        class=\"navigation\"\n        class:active={navigationState}\n        in:fly={{ y: 200, duration: 200 }}\n        out:fly={{ y: 200, duration: 200 }}>\n        <ul class=\"menu\">\n          <div\n            class=\"backdrop\"\n            on:click={() => (navigationState = false)}\n            style=\"-webkit-app-region: no-drag\" />\n          <div\n            class=\"close\"\n            on:click={() => (navigationState = false)}\n            style=\"-webkit-app-region: no-drag\">\n            <span class=\"lnr lnr-cross\" />\n          </div>\n          <li use:active={'/'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/\" use:link>\n              <img src=\"logo.png\" alt=\"OmniaWrite Logo\" />\n            </a>\n          </li>\n          <li use:active={'/write/*'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/write/\" use:link>{$_('header.write.title')}</a>\n          </li>\n          <li use:active={'/cards/'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/cards/\" use:link>{$_('header.cards.title')}</a>\n          </li>\n          <!--<li use:active={'/mindmap/'}>\n              <a href=\"/mindmap/\" use:link>Mindmaps</a>\n            </li>-->\n          <li use:active={'/settings'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/settings\" use:link>{$_('header.settings.title')}</a>\n          </li>\n          <li use:active={'/export'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/export\" use:link>{$_('header.export.title')}</a>\n          </li>\n          <li use:active={'/cloud'} style=\"-webkit-app-region: no-drag\">\n            <a href=\"/cloud\" use:link>{$_('header.cloud.title')}</a>\n          </li>\n          {#if cloudSyncState}\n            <li style=\"-webkit-app-region: no-drag\">\n              <span class=\"lnr lnr-cloud-upload\" />\n            </li>\n          {/if}\n        </ul>\n        {#if isRunningElectron}\n          <span\n            class=\"lnr lnr-cross titlebar\"\n            on:click={deskgap.closeWindow}\n            style=\"-webkit-app-region: no-drag\" />\n          <span\n            class=\"lnr lnr-frame-expand titlebar\"\n            on:click={deskgap.resizeWindow}\n            style=\"-webkit-app-region: no-drag\" />\n          <span\n            class=\"lnr lnr-chevron-down titlebar\"\n            on:click={deskgap.minimizeWindow}\n            style=\"-webkit-app-region: no-drag\" />\n        {/if}\n      </div>\n    {/if}\n    <button\n      class=\"mobile\"\n      id=\"open-navigation\"\n      on:click={() => (navigationState = true)}\n      style=\"-webkit-app-region: no-drag\">\n      <span class=\"lnr lnr-book\" />\n    </button>\n  </nav>\n  <div class=\"tabs\" style=\"-webkit-app-region: no-drag\">\n    <ul>\n      {#each $tabs.filter(tabs => tabs.project == $state.currentProject) as tab}\n        <li class=\"tab\" use:active={tab.link}>\n          <a href={tab.link} use:link>{tab.title}</a>\n          <span\n            class=\"lnr lnr-cross tab-action\"\n            on:click={() => tabs.removeTab(tab.id)} />\n        </li>\n      {/each}\n      {#if $location != '/write/' && $location.includes('write')}\n        <li class=\"tab new\" on:click={createTab}>\n          <span class=\"lnr lnr-plus-circle\" />\n        </li>\n      {/if}\n    </ul>\n  </div>\n</header>\n",
    "<script lang=\"javascript\">\n  import { fade, fly } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let show = false;\n  export let text = \"A notification message..\";\n  export let duration = 5000;\n\n  $: {\n    if (show && duration != \"forever\") {\n      setTimeout(() => {\n        show = false;\n      }, duration);\n    }\n  }\n</script>\n\n<style type=\"text/css\">\n  div {\n    cursor: pointer;\n  }\n</style>\n\n{#if show}\n  <div\n    on:click={() => {\n      dispatch('click');\n    }}\n    id=\"snackbar\"\n    in:fly={{ y: -100, duration: 500 }}\n    out:fly={{ x: 100, duration: 500 }}>\n    {@html text}\n    <slot />\n  </div>\n{/if}\n",
    "<script lang=\"javascript\">\n  import { intern, settings } from \"../stores\";\n  import { checkRequirements, deskgap, isRunningElectron } from \"../utils\";\n  import { onMount } from \"svelte\";\n  import { _ } from \"svelte-i18n\";\n\n  import Modal from \"./Modal.svelte\";\n  import Disclaimer from \"./Disclaimer.svelte\";\n  import Cloud from \"../routes/Cloud.svelte\";\n\n  let choice = \"none\";\n  let requirements = checkRequirements();\n  let installed = false;\n  let installable = false;\n  let showInstall = false;\n  let showDisclaimer = false;\n  let statusDisclaimer = false;\n\n  onMount(() => {\n    // variable store event\n    window.deferredPrompt = {};\n\n    // if the app can be installed emit beforeinstallprompt\n    window.addEventListener(\"beforeinstallprompt\", e => {\n      installable = showInstall = true;\n\n      // prevent default event\n      e.preventDefault();\n\n      // store install avaliable event\n      window.deferredPrompt = e;\n    });\n\n    // if are standalone android OR safari\n    if (\n      window.matchMedia(\"(display-mode: standalone)\").matches ||\n      window.navigator.standalone === true\n    ) {\n      installable = showInstall = false;\n    }\n\n    // do action when finished install\n    window.addEventListener(\"appinstalled\", e => {\n      console.log(\"success app install!\");\n    });\n  });\n\n  function install(e) {\n    window.deferredPrompt.prompt();\n    window.deferredPrompt.userChoice.then(choiceResult => {\n      if (choiceResult.outcome === \"accepted\") {\n        showInstall = false;\n        installed = true;\n      } else {\n        console.log(\"User dismissed the prompt\");\n      }\n      window.deferredPrompt = null;\n    });\n  }\n</script>\n\n<style type=\"text/css\">\n  .overlay {\n    position: fixed; /* Sit on top of the page content */\n    display: block; /* Hidden by default */\n    width: 100%; /* Full width (cover the whole page) */\n    height: 100%; /* Full height (cover the whole page) */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    text-align: center;\n    background-color: var(\n      --secondary-color\n    ); /* Black background with opacity */\n    z-index: 999999; /* Specify a stack order in case you're using a different order for other elements */\n    overflow: auto;\n  }\n  .install {\n    max-width: 640px;\n    display: inline-block;\n    padding: 1rem;\n    background-color: var(--background-color);\n  }\n\n  .installIcon {\n    text-align: center;\n    font-size: 3rem;\n  }\n\n  .installHeader {\n    display: none;\n    height: 4rem;\n    background-color: var(--primary-color);\n    width: 100vw;\n  }\n\n  .installHeader.show {\n    display: block;\n  }\n\n  .installHeader .control {\n    color: var(--menu-link);\n    cursor: pointer;\n    float: right;\n    line-height: 4rem;\n    font-size: 1.5rem;\n    padding: 0 1rem;\n    opacity: 0.65;\n  }\n\n  .installHeader .control:hover {\n    opacity: 1;\n  }\n\n  select#language {\n    width: 100%;\n  }\n\n  .disclaimer-check {\n    width: 3rem;\n    min-width: 3rem;\n    margin-right: 1rem;\n  }\n\n  .disclaimer-button {\n    width: calc(100% - 4rem);\n  }\n</style>\n\n<div class=\"overlay\">\n\n  <div\n    class:show={isRunningElectron}\n    class=\"installHeader\"\n    style=\"-webkit-app-region: drag\">\n    <span\n      class=\"lnr lnr-cross control\"\n      on:click={deskgap.closeWindow}\n      style=\"-webkit-app-region: drag\" />\n    <span\n      class=\"lnr lnr-chevron-down control\"\n      on:click={deskgap.minimizeWindow}\n      style=\"-webkit-app-region: drag\" />\n  </div>\n\n  <div class=\"install\">\n    <img src=\"logo.png\" alt=\"OmniaWrite Logo\" />\n    <hr />\n    {#if choice == 'none'}\n      <h3>{$_('install.language')}</h3>\n      <div class=\"field\">\n        <select bind:value={$settings.language} id=\"language\">\n          <option value=\"en\">{$_('settings.appereance.language.en')}</option>\n          <option value=\"de\">{$_('settings.appereance.language.de')}</option>\n        </select>\n      </div>\n      {#if showInstall}\n        <h3>{$_('install.requirements.title')}</h3>\n        <p>\n          <span\n            class=\"lnr\"\n            class:lnr-checkmark-circle={requirements.steps.internet}\n            class:lnr-question-circle={!requirements.steps.internet} />\n          {$_('install.requirements.internet')}\n        </p>\n        <p>\n          <span\n            class=\"lnr\"\n            class:lnr-checkmark-circle={requirements.steps.browser}\n            class:lnr-cross-circle={!requirements.steps.browser} />\n          {$_('install.requirements.browser')}\n        </p>\n        <p>\n          <span\n            class=\"lnr\"\n            class:lnr-checkmark-circle={requirements.steps.serviceWorker}\n            class:lnr-question-circle={!requirements.steps.serviceWorker} />\n          {$_('install.requirements.serviceWorker')}\n        </p>\n        <div class=\"grid\">\n          <div on:click={install}>\n            <span class=\"lnr lnr-download installIcon\" />\n            <br />\n            {$_('install.install.install')}\n          </div>\n          <div on:click={() => (showInstall = false)}>\n            <span class=\"lnr lnr-cloud installIcon\" />\n            <br />\n            {$_('install.install.browser')}\n          </div>\n        </div>\n      {:else}\n        <Modal bind:show={showDisclaimer}>\n          <h2 slot=\"header\">{$_('install.disclaimer.title')}</h2>\n          <Disclaimer />\n        </Modal>\n        <h3>{$_('install.disclaimer.action')}</h3>\n        <div class=\"btn-group\">\n          <button\n            class=\"disclaimer-check\"\n            class:red={!statusDisclaimer}\n            class:green={statusDisclaimer}\n            on:click={() => (statusDisclaimer = !statusDisclaimer)}>\n            <span\n              class=\"lnr\"\n              class:lnr-cross-circle={!statusDisclaimer}\n              class:lnr-checkmark-circle={statusDisclaimer} />\n          </button>\n          <button\n            class=\"disclaimer-button outline\"\n            on:click={() => (showDisclaimer = !showDisclaimer)}>\n            {$_('install.disclaimer.show')}\n          </button>\n        </div>\n        {#if statusDisclaimer}\n          <div class=\"grid\">\n            <div on:click={() => ($intern.installed = true)}>\n              <span class=\"lnr lnr-rocket installIcon\" />\n              <br />\n              {$_('install.start')}\n            </div>\n            <div on:click={() => (choice = 'cloud')}>\n              <span class=\"lnr lnr-cloud installIcon\" />\n              <br />\n              {$_('install.cloud')}\n            </div>\n          </div>\n        {/if}\n        {#if installable}\n          <div class=\"grid\">\n            <div on:click={() => (showInstall = true)}>\n              <span class=\"lnr lnr-arrow-left-circle\" />\n              {$_('install.back')}\n            </div>\n          </div>\n        {/if}\n      {/if}\n    {:else}\n      <div class=\"grid\">\n        <div on:click={() => (choice = 'none')}>\n          <span class=\"lnr lnr-arrow-left-circle\" />\n          {$_('install.back')}\n        </div>\n      </div>\n    {/if}\n\n    {#if choice == 'cloud'}\n      <Cloud hideExport=\"true\" />\n    {/if}\n  </div>\n</div>\n",
    "<script lang=\"javascript\">\n  import { createEventDispatcher } from \"svelte\";\n  import { fade, fly } from \"svelte/transition\";\n\n  export let show = false;\n  export let fullscreen = false;\n  export let persistent = false;\n</script>\n\n<style type=\"text/css\">\n  .modal-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 998;\n  }\n\n  .modal {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: calc(100vw - 2em);\n    max-width: 32em;\n    max-height: calc(100vh - 4em);\n    overflow: auto;\n    transform: translate(-50%, -50%);\n    padding: 1em;\n    border-radius: 0.2em;\n    background-color: var(--background-color);\n    z-index: 999;\n  }\n\n  .modal-close {\n    float: right;\n    margin-right: 1em;\n    opacity: 0.65;\n    cursor: pointer;\n  }\n\n  .modal-close:hover {\n    opacity: 1;\n  }\n\n  .modal.fullscreen {\n    max-width: 100vw;\n    height: 100vh;\n    max-height: 100vh;\n    width: 100vw;\n    text-align: center;\n    background-color: var(--secondary-color);\n  }\n</style>\n\n{#if show}\n  <div class=\"modal-background\" on:click={() => (show = false)} />\n\n  <div class=\"modal\" in:fly={{ y: 200, duration: 200 }} class:fullscreen>\n    {#if !persistent}\n      <div class=\"modal-close\" on:click={() => (show = false)}>\n        <span class=\"lnr lnr-cross\" />\n      </div>\n    {/if}\n    <slot name=\"header\" />\n    <slot />\n  </div>\n{/if}\n",
    "<script>\n  import licenses from \"../licenses.json\";\n\n  let licenseData = [];\n\n  Object.keys(licenses).forEach((key, index) => {\n    licenseData.push({\n      name: key,\n      license: licenses[key].licenses,\n      text: licenses[key].licenseText\n    });\n  });\n  console.log(licenseData);\n</script>\n\n<style>\n  .licenses {\n    max-width: 800px;\n  }\n</style>\n\n<div class=\"licenses\">\n  {#each licenseData as item}\n    <b>{item.name}</b>\n    <br />\n    <small>{item.license}</small>\n    <br />\n    <small>{item.text}</small>\n    <hr />\n  {/each}\n</div>\n",
    "<script lang=\"javascript\">\n  import { state, projects, chapters, scenes, settings } from \"../stores\";\n  import { deskgap } from \"../utils\";\n  import { _ } from \"svelte-i18n\";\n\n  import CreateProject from \"./Overview/CreateProject.svelte\";\n  import ProjectOverview from \"./Overview/Project.svelte\";\n  import Status from \"./Overview/Status.svelte\";\n  import Modal from \"../shared/Modal.svelte\";\n  import moment from \"moment\";\n  import \"moment/locale/de\";\n\n  moment.locale($settings.language);\n\n  let showCreateProject = false;\n  let showEditProject = false;\n\n  function changeProject(project) {\n    state.setCurrentProject(project);\n    projects.updateProjectTimestamp(project);\n    deskgap.reload();\n  }\n\n  function setProjectTitle(project) {\n    projects.setProjectTitle(\n      project,\n      document.getElementById(\"newProjectTitle\").value\n    );\n  }\n\n  function sort(b, a) {\n    if (a.lastOpen < b.lastOpen) {\n      return -1;\n    }\n    if (a.lastOpen > b.lastOpen) {\n      return 1;\n    }\n    return 0;\n  }\n</script>\n\n<style>\n  .projectTitle {\n    cursor: pointer;\n  }\n\n  .projectTitle:hover {\n    text-decoration: underline;\n    text-decoration-style: dashed;\n  }\n</style>\n\n<CreateProject\n  bind:showCreateProject\n  on:changeProject={event => changeProject(event.detail.project)} />\n<Status />\n\n{#each $projects.filter(project => project.id == $state.currentProject) as project}\n  <h1 class=\"projectTitle\" on:click={() => (showEditProject = true)}>\n    {project.title}\n  </h1>\n  <ProjectOverview />\n  <Modal bind:show={showEditProject}>\n    <div class=\"field\">\n      <label class=\"big\" for=\"author\">{$_('overview.project.title')}:</label>\n      <input\n        id=\"author\"\n        type=\"text\"\n        autocomplete=\"off\"\n        bind:value={project.title} />\n    </div>\n    <div class=\"btn-group\">\n      <button on:click={() => setProjectTitle(project.id)}>\n        {$_('overview.project.save')}\n      </button>\n    </div>\n  </Modal>\n{/each}\n<h1>{$_('overview.projects.title')}</h1>\n<div class=\"grid\">\n  <div class=\"new\" on:click={() => (showCreateProject = true)}>\n    <span class=\"lnr lnr-plus-circle\" />\n  </div>\n  {#each $projects.sort(sort) as project}\n    <div on:click={() => changeProject(project.id)}>\n      <h2>{project.title}</h2>\n      <p>\n        {$_('overview.projects.opened')}\n        {moment(project.lastOpen, 'X').fromNow()}\n      </p>\n      <p>\n        {$_('overview.project.chapters')}: {$chapters.filter(n => n.project == project.id).length}\n      </p>\n    </div>\n  {/each}\n</div>\n",
    "<script lang=\"javascript\">\n  import { onMount, onDestroy } from \"svelte\";\n  import { scenes, chapters, state, cards } from \"../stores\";\n  import { push, location } from \"svelte-spa-router\";\n  import { _ } from \"svelte-i18n\";\n  import Paragraph, { QuoteTool } from \"./Write/paragraph\";\n\n  import Overview from \"./Write/Overview.svelte\";\n  import EditorJS from \"@editorjs/editorjs\";\n  import Header from \"@editorjs/header\";\n  import Quote from \"@editorjs/quote\";\n  import Toast from \"../shared/Toast.svelte\";\n  import Placeholder from \"../shared/Placeholder.svelte\";\n\n  export let params = {};\n  let currentScene;\n  let currentChapter;\n  let lastScene;\n  let editorHtml;\n  let editor;\n  let editorChangeHappened;\n  let amountWords = 0;\n  let amountChars = 0;\n\n  let showToast = false;\n  let showToastText;\n\n  let focusMode = false;\n\n  $: currentScene = $scenes.filter(scene => scene.id == params.sceneId)[0];\n  $: state.setCurrentTitle(\n    params.sceneId ? currentScene.title : \"No scene selected!\"\n  );\n  $: {\n    if ($location) {\n      init();\n    }\n  }\n\n  onMount(() => {\n    if (params.sceneId !== null) {\n      document.addEventListener(\"keydown\", shortcutListener, false);\n    }\n  });\n\n  onDestroy(() => {\n    document.removeEventListener(\"keydown\", shortcutListener);\n    if (editorChangeHappened) {\n      save(lastScene);\n    }\n    if (editor && typeof editor.destroy === \"function\") {\n      editor.destroy();\n    }\n  });\n\n  function init() {\n    if (params.sceneId !== null) {\n      if (editor && typeof editor.destroy === \"function\") {\n        if (editorChangeHappened) {\n          save(lastScene);\n        }\n        editor.destroy();\n      }\n      editorChangeHappened = false;\n      editor = new EditorJS({\n        holder: \"codex-editor\",\n        placeholder: $_(\"write.editor.placeholder\"),\n        data: currentScene.content,\n        onChange: () => {\n          editorChangeHappened = true;\n          countWordsAndChars();\n        },\n        onReady: () => {\n          countWordsAndChars();\n        },\n        tools: {\n          quote: {\n            class: QuoteTool\n          },\n          paragraph: {\n            class: Paragraph,\n            inlineToolbar: [\"bold\", \"italic\", \"quote\"],\n            config: {\n              project: $state.currentProject,\n              cards: $cards.filter(card => {\n                return (\n                  card.project == $state.currentProject &&\n                  card.showTooltip == true\n                );\n              })\n            }\n          }\n        },\n        logLevel: \"ERROR\"\n      });\n      editor.tools;\n      lastScene = params.sceneId;\n    }\n  }\n\n  function save(param) {\n    editor\n      .save()\n      .then(outputData => {\n        scenes.setSceneContent(param, outputData);\n        editorChangeHappened = false;\n        showToast = true;\n        showToastText = $_(\"write.toast.saved\");\n      })\n      .catch(error => {\n        console.error(\"Saving failed: \", error);\n      });\n  }\n\n  function shortcutListener(evt) {\n    evt = evt || window.event;\n\n    // Escape => Toggle focus mode\n    if (evt.keyCode == 27) {\n      evt.preventDefault();\n      toggleFocus();\n    }\n    // CTRL/CMD + S => Save\n    if (\n      (window.navigator.platform.match(\"Mac\") ? evt.metaKey : evt.ctrlKey) &&\n      evt.keyCode == 83\n    ) {\n      evt.preventDefault();\n      save(params.sceneId);\n    }\n  }\n\n  function countWordsAndChars() {\n    amountChars = document.getElementById(\"codex-editor\").innerText.length;\n    amountWords = document.getElementById(\"codex-editor\").innerText.split(\" \")\n      .length;\n  }\n\n  function switchScene(e) {\n    push(\"/write/\" + e.target.value);\n    e.target.selectedIndex = 0;\n  }\n\n  function toggleFullscreen() {\n    let element = document.documentElement;\n    if (!document.fullscreen) {\n      element.webkitRequestFullscreen();\n    } else {\n      document.webkitExitFullscreen();\n    }\n  }\n\n  function toggleFocus() {\n    focusMode = !focusMode;\n    document.getElementById(\"content\").classList.toggle(\"focus\");\n  }\n\n  function undo() {\n    document.execCommand(\"undo\", false, null);\n  }\n\n  function redo() {\n    document.execCommand(\"redo\", false, null);\n  }\n</script>\n\n<style type=\"text/css\">\n  * {\n    -webkit-tap-highlight-color: rgba(255, 255, 255, 0) !important;\n    -webkit-focus-ring-color: rgba(255, 255, 255, 0) !important;\n    outline: 0 !important;\n  }\n</style>\n\n<Toast bind:show={showToast} text={showToastText} />\n\n{#if $state.currentProject}\n  {#if params.sceneId !== null}\n    <div class=\"toolbar\">\n      <span class=\"tooltip\">\n        {amountWords} {$_('write.toolbar.words')}\n        <span class=\"tooltiptext\">\n          {amountChars} {$_('write.toolbar.chars')}\n        </span>\n      </span>\n      <span class=\"lnr lnr-undo tooltip\" on:click={undo}>\n        <span class=\"tooltiptext\">{$_('write.toolbar.undo')}</span>\n      </span>\n      <span class=\"lnr lnr-redo tooltip\" on:click={redo}>\n        <span class=\"tooltiptext\">{$_('write.toolbar.redo')}</span>\n      </span>\n      {#if editorChangeHappened}\n        <span\n          class=\"lnr lnr-checkmark-circle tooltip\"\n          on:click={() => save(params.sceneId)}>\n          <span class=\"tooltiptext\">{$_('write.toolbar.save')}</span>\n        </span>\n      {/if}\n      <span\n        class=\"lnr tooltip\"\n        on:click={toggleFocus}\n        class:lnr-eye={!focusMode}\n        class:lnr-exit={focusMode}>\n        <span class=\"tooltiptext\">{$_('write.toolbar.focus')}</span>\n      </span>\n      <!--<span class=\"lnr lnr-frame-expand tooltip\" on:click={toggleFullscreen}>\n        <span class=\"tooltiptext\">{$_('write.toolbar.fullscreen')}</span>\n      </span>-->\n      {#if focusMode}\n        <select id=\"focusSceneSelect\" on:change={switchScene}>\n          <option value=\"\" selected=\"selected\">\n            {$_('write.toolbar.switchScene')}\n          </option>\n          {#each $chapters.filter(chapter => chapter.project == $state.currentProject) as chapter, i}\n            <optgroup label={chapter.title}>\n              {#each $scenes.filter(scene => scene.chapter == chapter.id) as scene}\n                <option value={scene.id}>{scene.title}</option>\n              {/each}\n            </optgroup>\n          {/each}\n        </select>\n      {/if}\n    </div>\n    <div class=\"editpane\">\n      <h1 contenteditable=\"true\">{currentScene.title}</h1>\n      <div id=\"codex-editor\" />\n    </div>\n  {:else}\n    <Overview />\n  {/if}\n{:else}\n  <Placeholder />\n{/if}\n",
    "<script lang=\"javascript\">\n  import { _, locale } from \"svelte-i18n\";\n  import { push } from \"svelte-spa-router\";\n\n  import { settings } from \"../stores\";\n</script>\n\n<style type=\"text/css\">\n  .preview {\n    max-width: 800px;\n    padding: 1rem;\n    border-radius: 0px 0px 0px 0px;\n    -moz-border-radius: 0px 0px 0px 0px;\n    -webkit-border-radius: 0px 0px 0px 0px;\n    border: 2px dashed var(--editor-color);\n  }\n  .link {\n    cursor: pointer;\n  }\n  .link:hover {\n    text-decoration: underline;\n  }\n</style>\n\n<h2>{$_('settings.appereance.title')}</h2>\n<div class=\"field\">\n  <label class=\"big\" for=\"editTheme\">\n    {$_('settings.appereance.theme.title')}\n  </label>\n  <select id=\"editTheme\" bind:value={$settings.theme}>\n    <option value=\"dark\">{$_('settings.appereance.theme.dark')}</option>\n    <option value=\"light\">{$_('settings.appereance.theme.light')}</option>\n  </select>\n</div>\n<div class=\"field\">\n  <label class=\"big\" for=\"editTheme\">\n    {$_('settings.appereance.language.title')}\n  </label>\n  <select id=\"editLanguage\" bind:value={$settings.language}>\n    <option value=\"en\">{$_('settings.appereance.language.en')}</option>\n    <option value=\"de\">{$_('settings.appereance.language.de')}</option>\n  </select>\n</div>\n\n<h2>{$_('header.write.title')}</h2>\n<div class=\"field\">\n  <label class=\"big\" for=\"autosave\">{$_('settings.write.autosave')}</label>\n  <input id=\"autosave\" type=\"checkbox\" bind:checked={$settings.autosave} />\n</div>\n<div class=\"field\">\n  <label class=\"big\" for=\"fontSize\">{$_('settings.write.fontsize')}</label>\n  <input\n    id=\"fontSize\"\n    type=\"range\"\n    bind:value={$settings.fontsize}\n    min=\".6\"\n    max=\"1.2\"\n    step=\".1\" />\n</div>\n<div id=\"codex-editor\" class=\"preview\">\n  <div class=\"codex-editor\">\n    Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy\n    eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam\n    voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet\n    clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit\n    amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\n    nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed\n    diam voluptua amet.\n  </div>\n</div>\n<br />\n<small class=\"link\" on:click={() => push('/thirdparty')}>\n  {$_('settings.thirdparty')}\n</small>\n|\n<small class=\"link\" on:click={() => push('/policy')}>\n  {$_('cloud.privacy.show')}\n</small>\n|\n<small class=\"link\" on:click={() => push('/disclaimer')}>\n  {$_('install.disclaimer.show')}\n</small>\n",
    "<script lang=\"javascript\">\n  import { state, chapters, scenes } from \"../stores\";\n  import { onMount } from \"svelte\";\n  import { link, push, replace } from \"svelte-spa-router\";\n  import { fade, fly } from \"svelte/transition\";\n  import { _ } from \"svelte-i18n\";\n\n  import Modal from \"./Modal.svelte\";\n  import Placeholder from \"./Placeholder.svelte\";\n  import active from \"svelte-spa-router/active\";\n  import { initDraggable } from \"./Sidebar/draggable\";\n\n  export let sidebarState;\n\n  let showCreateChapter = false;\n  let createChapterTitle = \"\";\n\n  function createChapter() {\n    chapters.createChapter($state.currentProject, createChapterTitle);\n    showCreateChapter = false;\n    createChapterTitle = \"\";\n  }\n\n  let createSceneTitle = \"\";\n  let createSceneChapter;\n  let showCreateScene = false;\n\n  function openCreateScene(chapter) {\n    createSceneChapter = chapter;\n    showCreateScene = true;\n  }\n\n  function createScene() {\n    scenes.createScene(createSceneChapter, createSceneTitle);\n    showCreateScene = false;\n    createSceneTitle = \"\";\n  }\n\n  let showEditChapter = false;\n  let objEditChapter;\n\n  function editChapter() {\n    chapters.setChapterTitle(objEditChapter.id, objEditChapter.title);\n    showEditChapter = false;\n  }\n\n  let showEditScene = false;\n  let objEditScene;\n\n  function editScene() {\n    scenes.setSceneTitle(objEditScene.id, objEditScene.title);\n    showEditScene = false;\n  }\n\n  onMount(() => {\n    initDraggable(document.querySelectorAll(\".menu .parent\"));\n    initDraggable(document.querySelectorAll(\".scenes .sceneDrag\"));\n  });\n\n  function startDrag(e) {\n    e.target.parentNode.parentNode.setAttribute(\"draggable\", true);\n  }\n  function startDragScene(e) {\n    e.target.parentNode.setAttribute(\"draggable\", true);\n  }\n</script>\n\n<style type=\"text/css\">\n  .swap-list {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  .swap-list > li {\n    padding: 0.5rem 0 0.5rem 2rem;\n  }\n\n  .swap-list > li .action {\n    cursor: pointer;\n    opacity: 0.65;\n  }\n\n  .swap-list > li .action:hover {\n    opacity: 1;\n  }\n\n  .swap-list li:first-child .lnr-chevron-up {\n    visibility: hidden;\n  }\n\n  .swap-list li:last-child .lnr-chevron-down {\n    visibility: hidden;\n  }\n\n  [draggable] {\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    -khtml-user-drag: element;\n    -webkit-user-drag: element;\n  }\n</style>\n\n<Modal bind:show={showCreateChapter}>\n  <h2 slot=\"header\">{$_('sidebar.modal.newChapter.header')}</h2>\n  <div class=\"field\">\n    <label for=\"editChapterInput\">{$_('sidebar.modal.title')}</label>\n    <input\n      id=\"editChapterInput\"\n      bind:value={createChapterTitle}\n      autocomplete=\"off\"\n      placeholder=\"enter your title\"\n      type=\"text\" />\n  </div>\n  <hr />\n  <div class=\"btn-group\">\n    {#if createChapterTitle.length > 0}\n      <button on:click={createChapter}>\n        {$_('sidebar.modal.newChapter.button')}\n      </button>\n    {/if}\n  </div>\n</Modal>\n\n<Modal bind:show={showCreateScene}>\n  <h2 slot=\"header\">{$_('sidebar.modal.newScene.header')}</h2>\n  <div class=\"field\">\n    <label for=\"editChapterInput\">{$_('sidebar.modal.title')}</label>\n    <input\n      id=\"editChapterInput\"\n      bind:value={createSceneTitle}\n      autocomplete=\"off\"\n      placeholder=\"enter your title\"\n      type=\"text\" />\n  </div>\n  <hr />\n  <div class=\"btn-group\">\n    {#if createSceneTitle.length > 0}\n      <button on:click={createScene}>\n        {$_('sidebar.modal.newScene.button')}\n      </button>\n    {/if}\n  </div>\n</Modal>\n\n<Modal bind:show={showEditChapter}>\n  <h2 slot=\"header\">{objEditChapter.title}</h2>\n  <h3>Edit</h3>\n  <div class=\"field\">\n    <label for=\"editChapterInput\">{$_('sidebar.modal.title')}</label>\n    <input\n      id=\"editChapterInput\"\n      bind:value={objEditChapter.title}\n      autocomplete=\"off\"\n      placeholder=\"enter your title\"\n      type=\"text\" />\n  </div>\n  <div class=\"btn-group\">\n    {#if objEditChapter.title.length > 0}\n      <button on:click={editChapter}>\n        {$_('sidebar.modal.edit.buttonSave')}\n      </button>\n    {/if}\n    <button\n      style=\"float: right;\"\n      class=\"warning\"\n      on:click={() => {\n        chapters.removeChapter(objEditChapter.id);\n        showEditChapter = false;\n      }}>\n      {$_('sidebar.modal.edit.buttonDelete')}\n    </button>\n  </div>\n</Modal>\n\n<Modal bind:show={showEditScene}>\n  <h2 slot=\"header\">{objEditScene.title}</h2>\n  <div class=\"field\">\n    <label for=\"editChapterInput\">{$_('sidebar.modal.title')}</label>\n    <input\n      id=\"editChapterInput\"\n      bind:value={objEditScene.title}\n      autocomplete=\"off\"\n      placeholder=\"enter your title\"\n      type=\"text\" />\n  </div>\n  <br />\n  <div class=\"btn-group\">\n    {#if objEditScene.title.length > 0}\n      <button on:click={editScene}>\n        {$_('sidebar.modal.edit.buttonSave')}\n      </button>\n    {/if}\n    <button\n      style=\"float: right;\"\n      class=\"warning\"\n      on:click={() => {\n        showEditScene = false;\n        push('/write');\n        window.setTimeout(() => scenes.removeScene(objEditScene.id), 200);\n      }}>\n      {$_('sidebar.modal.edit.buttonDelete')}\n    </button>\n  </div>\n</Modal>\n\n{#if sidebarState}\n  <div\n    id=\"sidebar\"\n    class=\"navigation noselect\"\n    class:active={sidebarState}\n    in:fly={{ y: 200, duration: 200 }}\n    out:fly={{ y: 200, duration: 200 }}>\n    <ul class=\"menu\">\n      <div\n        class=\"backdrop\"\n        on:click={() => (sidebarState = false)}\n        style=\"-webkit-app-region: drag\" />\n      <div\n        id=\"close-sidebar\"\n        class=\"close\"\n        on:click={() => (sidebarState = false)}\n        style=\"-webkit-app-region: drag\">\n        <span class=\"lnr lnr-cross\" />\n      </div>\n      {#if $state.currentProject}\n        {#each $chapters\n          .filter(chapter => chapter.project == $state.currentProject)\n          .sort((a, b) => a.order - b.order) as chapter, i}\n          <li\n            id=\"chapter-{chapter.id}\"\n            class=\"parent\"\n            class:open={chapter.ui.open}\n            draggable=\"false\"\n            data-type=\"chapter\"\n            data-id={chapter.id}\n            data-project={chapter.project}>\n            <span\n              class=\"key\"\n              on:click={() => chapters.toggleChapterInSidebar(chapter.id)}>\n              {chapter.title}\n              <span class=\"lnr lnr-chevron-up collapse\" />\n              <span\n                class=\"lnr lnr-cog action\"\n                on:click={() => ([showEditChapter, objEditChapter] = [true, chapter])} />\n              <span\n                class=\"lnr lnr-line-spacing action\"\n                on:mousedown={startDrag}\n                style=\"cursor: grab;\" />\n            </span>\n            <ul class=\"scenes\">\n              {#each $scenes\n                .filter(scene => scene.chapter == chapter.id)\n                .sort((a, b) => a.order - b.order) as scene}\n                <li\n                  class=\"sceneDrag\"\n                  use:active={'/write/' + scene.id}\n                  on:click={() => push('/write/' + scene.id)}\n                  data-type=\"scene\"\n                  data-id={scene.id}\n                  data-chapter={scene.chapter}>\n                  <a href=\"/write/{scene.id}\" use:link>{scene.title}</a>\n                  <span\n                    class=\"lnr lnr-cog action\"\n                    on:click={() => ([showEditScene, objEditScene] = [true, scene])} />\n                  <span\n                    class=\"lnr lnr-line-spacing action\"\n                    on:mousedown={startDragScene}\n                    style=\"cursor: grab;\" />\n                </li>\n              {/each}\n              <li>\n                <button on:click={() => openCreateScene(chapter.id)}>\n                  <span class=\"lnr lnr-plus-circle\" />\n                  {$_('sidebar.createScene')}\n                </button>\n              </li>\n            </ul>\n          </li>\n        {/each}\n        <hr class=\"divider\" />\n        <li class=\"parent\">\n          <span class=\"key\" on:click={() => (showCreateChapter = true)}>\n            <span class=\"lnr lnr-plus-circle collapse\" />\n            {$_('sidebar.createChapter')}\n          </span>\n        </li>\n      {:else}\n        <Placeholder />\n      {/if}\n    </ul>\n  </div>\n{/if}\n",
    "<script lang=\"javascript\">\n  import { onMount } from \"svelte\";\n  import { state, settings } from \"../stores\";\n  import { deskgap } from \"../utils\";\n  import { _ } from \"svelte-i18n\";\n\n  import cloud from \"../cloud\";\n  import Alert from \"../shared/Alert.svelte\";\n  import Toast from \"../shared/Toast.svelte\";\n  import Modal from \"../shared/Modal.svelte\";\n  import Policy from \"./Cloud/Policy.svelte\";\n\n  import moment from \"moment\";\n  import \"moment/locale/de\";\n\n  moment.locale($settings.language);\n\n  export let hideExport = false;\n\n  let dataLoaded = false;\n\n  let registerName;\n  let registerUser;\n  let registerPass;\n\n  let loginUser;\n  let loginPass;\n\n  let resetUser;\n\n  let isUserLoggedIn = false;\n\n  let showAlert = false;\n  let showAlertType;\n  let showAlertText;\n\n  let showToast = false;\n  let showToastText;\n\n  let statusPrivacyPolicy;\n  let showPrivacyPolicy;\n\n  let saveCloudButtonLoading = false;\n  let getCloudButtonLoading = false;\n  let loginButtonLoading = false;\n  let registerButtonLoading = false;\n  let logoutButtonLoading = false;\n  let resetButtonLoading = false;\n\n  onMount(() => {\n    checkLogin();\n  });\n\n  function saveCloud() {\n    saveCloudButtonLoading = true;\n    cloud.saveToCloud().then(retValue => {\n      if (retValue == true) {\n        saveCloudButtonLoading = false;\n\n        showToast = true;\n        showToastText = $_(\"cloud.toast.savedCloud\");\n      }\n    });\n  }\n\n  async function getCloud() {\n    getCloudButtonLoading = true;\n    cloud.saveFromCloud().then(retValue => {\n      if (retValue == true) {\n        getCloudButtonLoading = false;\n        deskgap.reload();\n      }\n    });\n  }\n\n  function login() {\n    loginButtonLoading = true;\n    cloud\n      .login(loginUser, loginPass)\n      .then(loggedInUser => {\n        state.setCurrentUser(\n          loggedInUser.objectId,\n          loggedInUser.email,\n          loggedInUser[\"user-token\"]\n        );\n        checkLogin();\n        showAlert = false;\n        loginButtonLoading = false;\n        showToast = true;\n        showToastText = $_(\"cloud.toast.loginSuccessful\");\n      })\n      .catch(error => {\n        showAlert = true;\n        showAlertText =\n          error.message + (error.code ? \" - code: \" + error.code : \"\");\n        loginButtonLoading = false;\n      });\n  }\n\n  function register() {\n    registerButtonLoading = true;\n    if (statusPrivacyPolicy) {\n      cloud\n        .register(registerName, registerUser, registerPass)\n        .then(registeredUser => {\n          return registeredUser;\n        })\n        .then(registeredUser => {\n          checkLogin();\n          registerButtonLoading = false;\n          showAlert = true;\n          showAlertText = $_(\"cloud.toast.activateEmail\");\n        })\n        .catch(error => {\n          showAlert = true;\n          showAlertText =\n            error.message + (error.code ? \" - code: \" + error.code : \"\");\n          registerButtonLoading = false;\n        });\n    } else {\n      registerButtonLoading = false;\n      showAlert = true;\n      showAlertText = $_(\"cloud.toast.acceptPolicy\");\n    }\n  }\n\n  function resetPassword() {\n    resetButtonLoading = true;\n    Backendless.UserService.restorePassword(resetUser)\n      .then(() => {\n        showAlert = true;\n        showAlertText = $_(\"cloud.toast.resetPassword\");\n        resetButtonLoading = false;\n      })\n      .catch(error => {\n        showAlert = true;\n        showAlertText =\n          error.message + (error.code ? \" - code: \" + error.code : \"\");\n        resetButtonLoading = false;\n      });\n  }\n\n  function logout() {\n    logoutButtonLoading = true;\n    cloud.logout().then(() => {\n      checkLogin();\n      logoutButtonLoading = false;\n    });\n  }\n\n  async function checkLogin() {\n    dataLoaded = false;\n    cloud.isUserLoggedIn().then(retValue => {\n      isUserLoggedIn = retValue;\n      dataLoaded = true;\n    });\n  }\n</script>\n\n<style type=\"text/css\">\n  .disclaimer-check {\n    width: 3rem;\n    min-width: 3rem;\n    margin-right: 1rem;\n  }\n\n  .disclaimer-button {\n    width: calc(100% - 4rem);\n  }\n\n  .cloud-container {\n    max-width: 800px;\n  }\n\n  .grid .cloud {\n    text-align: center;\n  }\n\n  .grid .cloud .lnr {\n    font-size: 3rem;\n  }\n</style>\n\n<Toast bind:show={showToast} text={showToastText} />\n<Modal bind:show={showPrivacyPolicy}>\n  <h2 slot=\"header\">{$_('cloud.privacy.show')}</h2>\n  <Policy />\n</Modal>\n<div class=\"cloud-container\">\n  {#if dataLoaded}\n    <Alert danger bind:show={showAlert}>\n      <span class=\"lnr lnr-warning\">{showAlertText}</span>\n    </Alert>\n    {#if isUserLoggedIn}\n      <h2>{$_('cloud.cloud.title')}</h2>\n      <div id=\"cards\" class=\"grid\">\n        {#if saveCloudButtonLoading || getCloudButtonLoading}\n          <div class=\"cloud\">\n            <span class=\"lnr lnr-sync spinner loading\" />\n          </div>\n        {:else}\n          {#if !$state.lastCloudSave || $state.lastCloudSave < $state.lastLocalSave}\n            <div class=\"cloud\" on:click={saveCloud}>\n              <span class=\"lnr lnr-cloud-upload\" />\n              Upload\n              <small>\n                <i>\n                  {$_('cloud.updated')}\n                  {moment($state.lastLocalSave, 'X').fromNow()}\n                </i>\n              </small>\n            </div>\n          {/if}\n          {#if $state.lastCloudSave}\n            <div class=\"cloud\" on:click={getCloud}>\n              <span class=\"lnr lnr-cloud-download\" />\n              Download\n              <small>\n                <i>\n                  {$_('cloud.updated')}\n                  {moment($state.lastCloudSave, 'X').fromNow()}\n                </i>\n              </small>\n            </div>\n          {/if}\n        {/if}\n      </div>\n      <h2>{$_('cloud.account.title')}</h2>\n      <div class=\"field\">\n        <label class=\"big\" for=\"editChapterInput\">\n          {$_('cloud.account.connectedAccount')}\n        </label>\n        {$state.currentUserEmail}\n      </div>\n      <div class=\"btn-group\">\n        <button\n          on:click={logout}\n          disabled={logoutButtonLoading}\n          class:loading={logoutButtonLoading}>\n          <span class=\"lnr lnr-sync spinner\" />\n          {$_('cloud.account.logout')}\n        </button>\n      </div>\n    {:else}\n      <h2>{$_('cloud.login.title')}</h2>\n      <div class=\"field\">\n        <label class=\"big\" for=\"loginUser\">{$_('cloud.login.email')}</label>\n        <input\n          id=\"loginUser\"\n          type=\"email\"\n          placeholder=\"john.doe@email.tld\"\n          bind:value={loginUser} />\n      </div>\n      <div class=\"field\">\n        <label class=\"big\" for=\"loginPass\">{$_('cloud.login.password')}</label>\n        <input\n          id=\"loginPass\"\n          type=\"password\"\n          autocomplete=\"off\"\n          placeholder=\"******\"\n          bind:value={loginPass} />\n      </div>\n      <div class=\"btn-group\">\n        <button\n          on:click={login}\n          disabled={loginButtonLoading}\n          class:loading={loginButtonLoading}>\n          <span class=\"lnr lnr-sync spinner\" />\n          {$_('cloud.login.button')}\n        </button>\n      </div>\n      {#if !hideExport}\n        <h2>{$_('cloud.register.title')}</h2>\n        <div class=\"field\">\n          <label class=\"big\" for=\"newName\">{$_('cloud.register.name')}</label>\n          <input\n            id=\"newName\"\n            type=\"text\"\n            placeholder=\"John Doe\"\n            autocomplete=\"off\"\n            bind:value={registerName} />\n        </div>\n        <div class=\"field\">\n          <label class=\"big\" for=\"newUser\">{$_('cloud.login.email')}</label>\n          <input\n            id=\"newUser\"\n            type=\"email\"\n            placeholder=\"john.doe@email.tld\"\n            autocomplete=\"off\"\n            bind:value={registerUser} />\n        </div>\n        <div class=\"field\">\n          <label class=\"big\" for=\"newPass\">{$_('cloud.login.password')}</label>\n          <input\n            id=\"newPass\"\n            type=\"password\"\n            autocomplete=\"off\"\n            placeholder=\"******\"\n            bind:value={registerPass} />\n        </div>\n        <div class=\"btn-group\">\n          <button\n            class=\"disclaimer-check\"\n            class:red={!statusPrivacyPolicy}\n            class:green={statusPrivacyPolicy}\n            on:click={() => (statusPrivacyPolicy = !statusPrivacyPolicy)}>\n            <span\n              class=\"lnr\"\n              class:lnr-cross-circle={!statusPrivacyPolicy}\n              class:lnr-checkmark-circle={statusPrivacyPolicy} />\n          </button>\n          <button\n            class=\"disclaimer-button outline\"\n            on:click={() => (showPrivacyPolicy = true)}>\n            {$_('cloud.privacy.show')}\n          </button>\n        </div>\n        <div class=\"btn-group\">\n          <button\n            on:click={register}\n            disabled={registerButtonLoading}\n            class:loading={registerButtonLoading}>\n            <span class=\"lnr lnr-sync spinner\" />\n            {$_('cloud.register.button')}\n          </button>\n        </div>\n      {/if}\n      <h2>{$_('cloud.reset.title')}</h2>\n      <div class=\"field\">\n        <label class=\"big\" for=\"resetUser\">{$_('cloud.login.email')}</label>\n        <input\n          id=\"resetUser\"\n          type=\"email\"\n          placeholder=\"john.doe@email.tld\"\n          autocomplete=\"off\"\n          bind:value={resetUser} />\n      </div>\n      <div class=\"btn-group\">\n        <button\n          on:click={resetPassword}\n          disabled={resetButtonLoading}\n          class:loading={resetButtonLoading}>\n          <span class=\"lnr lnr-sync spinner\" />\n          {$_('cloud.reset.button')}\n        </button>\n      </div>\n    {/if}\n  {:else}\n    <div class=\"lds-ellipsis\">\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { _ } from \"svelte-i18n\";\n</script>\n\n<style>\n  .placeholder {\n    position: relative;\n    top: 50%;\n    text-align: center;\n    opacity: 0.5;\n    font-style: italic;\n  }\n</style>\n\n<div class=\"placeholder\">{$_('common.no-project-selected')}</div>\n",
    "<script lang=\"javascript\">\n  import { createEventDispatcher } from \"svelte\";\n  import { fade, fly } from \"svelte/transition\";\n\n  export let show = false;\n\n  export let danger = false;\n  export let success = false;\n  export let info = false;\n  export let warning = false;\n\n  export let duration = 10000;\n\n  $: {\n    if (show) {\n      setTimeout(() => {\n        show = false;\n      }, duration);\n    }\n  }\n</script>\n\n<style type=\"text/css\">\n  .alert {\n    padding: 20px;\n  }\n\n  .alert.danger {\n    background-color: #f44336;\n  }\n\n  .alert.success {\n    background-color: #4caf50;\n  }\n\n  .alert.info {\n    background-color: #2196f3;\n  }\n\n  .alert.warning {\n    background-color: #ff9800;\n  }\n\n  .alert span {\n    line-height: normal;\n  }\n\n  .closebtn {\n    color: white;\n    float: right;\n    line-height: 1rem;\n    font-size: 1rem;\n    cursor: pointer;\n    transition: 0.3s;\n    opacity: 0.65;\n  }\n\n  .closebtn:hover {\n    opacity: 1;\n  }\n</style>\n\n{#if show}\n  <div class=\"alert\" class:danger class:success class:warning class:info>\n    <span class=\"closebtn\" on:click={() => (show = false)}>\n      <span class=\"lnr lnr-cross\" />\n    </span>\n    <slot name=\"title\" />\n    <slot />\n  </div>\n{/if}\n",
    "<script lang=\"javascript\">\n  import { state, projects, chapters, scenes, settings } from \"../../stores\";\n  import { _ } from \"svelte-i18n\";\n\n  let chapterCount = 0;\n  let sceneCount = 0;\n  let wordCount = 0;\n  let charCount = 0;\n\n  $: {\n    chapterCount = 0;\n    sceneCount = 0;\n    wordCount = 0;\n    charCount = 0;\n    chapters.subscribe(chapters => {\n      chapters\n        .filter(chapter => chapter.project == $state.currentProject)\n        .forEach(chapter => {\n          chapterCount++;\n          scenes.subscribe(scenes => {\n            scenes\n              .filter(scene => scene.chapter == chapter.id)\n              .forEach(scene => {\n                sceneCount++;\n                if (scene.content) {\n                  scene.content.blocks.forEach(block => {\n                    wordCount += block.data.text.split(\" \").length;\n                    charCount += block.data.text.length;\n                  });\n                }\n              });\n          });\n        });\n    });\n  }\n</script>\n\n<style type=\"text/css\">\n  .column {\n    float: left;\n    width: 20%;\n    padding: 0 5px;\n  }\n\n  .row {\n    margin: 0 -5px;\n  }\n\n  .row:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n\n  @media screen and (max-width: 600px) {\n    .column {\n      width: 100%;\n      display: block;\n      margin-bottom: 1rem;\n    }\n  }\n  .card {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    padding: 1rem;\n    text-align: center;\n    background-color: var(--background-color);\n    color: var(--text-color);\n  }\n  .card:hover {\n    transform: scale(1.1);\n  }\n</style>\n\n<div class=\"row\">\n  <div class=\"column\">\n    <div class=\"card\">\n      <h3>{chapterCount}</h3>\n      <p>{$_('overview.project.chapters')}</p>\n    </div>\n  </div>\n\n  <div class=\"column\">\n    <div class=\"card\">\n      <h3>{sceneCount}</h3>\n      <p>{$_('overview.project.scenes')}</p>\n    </div>\n  </div>\n\n  <div class=\"column\">\n    <div class=\"card\">\n      <h3>{wordCount}</h3>\n      <p>{$_('overview.project.words')}</p>\n    </div>\n  </div>\n\n  <div class=\"column\">\n    <div class=\"card\">\n      <h3>{charCount}</h3>\n      <p>{$_('overview.project.characters')}</p>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import { _ } from \"svelte-i18n\";\n  import { deskgap, isRunningElectron } from \"../../utils\";\n</script>\n\n<style>\n  #cards {\n    max-width: 800px;\n  }\n  #cards div {\n    font-size: 1.5rem;\n  }\n</style>\n\n{#if !isRunningElectron}\n  <div id=\"cards\" class=\"grid\">\n\n    <div class=\"new\">\n      <a href=\"https://trello.com/b/XmcZBEIl/omniawrite\" target=\"_blank\">\n        <span class=\"lnr lnr-bug\" />\n        {$_('developementStatus')}\n      </a>\n\n    </div>\n  </div>\n{/if}\n"
  ],
  "names": [],
  "mappings": "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"
}